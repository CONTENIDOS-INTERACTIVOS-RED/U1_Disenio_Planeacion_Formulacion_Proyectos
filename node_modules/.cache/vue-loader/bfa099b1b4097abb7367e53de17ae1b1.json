{"remainingRequest":"/home/runner/work/U1_Disenio_Planeacion_Formulacion_Proyectos/U1_Disenio_Planeacion_Formulacion_Proyectos/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Disenio_Planeacion_Formulacion_Proyectos/U1_Disenio_Planeacion_Formulacion_Proyectos/src/views/curso/Tema1.vue?vue&type=template&id=74d394b4&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Disenio_Planeacion_Formulacion_Proyectos/U1_Disenio_Planeacion_Formulacion_Proyectos/src/views/curso/Tema1.vue","mtime":1733717006740},{"path":"/home/runner/work/U1_Disenio_Planeacion_Formulacion_Proyectos/U1_Disenio_Planeacion_Formulacion_Proyectos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Disenio_Planeacion_Formulacion_Proyectos/U1_Disenio_Planeacion_Formulacion_Proyectos/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Disenio_Planeacion_Formulacion_Proyectos/U1_Disenio_Planeacion_Formulacion_Proyectos/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Disenio_Planeacion_Formulacion_Proyectos/U1_Disenio_Planeacion_Formulacion_Proyectos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Disenio_Planeacion_Formulacion_Proyectos/U1_Disenio_Planeacion_Formulacion_Proyectos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}